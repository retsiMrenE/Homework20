package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.HashMap;
import java.util.Random;


public class TelegramBot extends TelegramLongPollingBot {

    private HashMap<Long, Integer> statistic;

    public TelegramBot() {
        this.statistic = (HashMap<Long, Integer>) Database.load();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String playerMessage = update.getMessage().getText().toLowerCase();
            Long chatId = update.getMessage().getChatId();

            if (playerMessage.equals("–∫–∞–º–µ–Ω—å") || playerMessage.equals("–Ω–æ–∂–Ω–∏—Ü—ã") || playerMessage.equals("–±—É–º–∞–≥–∞")) {
                String[] options = {"–ö–∞–º–µ–Ω—å", "–ë—É–º–∞–≥–∞", "–ù–æ–∂–Ω–∏—Ü—ã"};
                Random random = new Random();
                int number = random.nextInt(3);

                String botMessage = options[number].toLowerCase();
                sendMessage(update, botMessage);

                if (playerMessage.equals(botMessage)) {
                    sendMessage(update, "–ù–∏—á—å—è!");
                } else if (
                                (playerMessage.equals("–∫–∞–º–µ–Ω—å") && botMessage.equals("–Ω–æ–∂–Ω–∏—Ü—ã")) ||
                                (playerMessage.equals("–±—É–º–∞–≥–∞") && botMessage.equals("–∫–∞–º–µ–Ω—å")) ||
                                (playerMessage.equals("–Ω–æ–∂–Ω–∏—Ü—ã") && botMessage.equals("–±—É–º–∞–≥–∞"))
                ) {
                    sendMessage(update, "–¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ");
                    addWin(chatId);
                } else {
                    sendMessage(update, "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! üò¢");
                }
            }
            else if (playerMessage.equals("/wins")) {
                sendMessage(update, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: " + getWins(chatId));
            }
        }
    }

    public void sendMessage(Update update, String text) {
        String chatId = update.getMessage().getChatId().toString();
        SendMessage response = new SendMessage();

        response.setChatId(chatId);
        response.setText(text);

        try {
            execute(response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addWin(Long chatId) {
        statistic.put(chatId, statistic.getOrDefault(chatId, 0) + 1);
        Database.save(statistic);
    }

    public int getWins(Long chatId) {
        return statistic.getOrDefault(chatId, 0);
    }

    @Override
    public String getBotUsername() {
        return "RPSBot";
    }

    @Override
    public String getBotToken() {
        return "";
    }
}
